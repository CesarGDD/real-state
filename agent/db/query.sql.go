// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agent (first_name, last_name, phone, email, password, photo, description)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING agent_id, first_name, last_name, phone, email, password, photo, description
`

type CreateAgentParams struct {
	FirstName   string
	LastName    string
	Phone       int16
	Email       string
	Password    string
	Photo       string
	Description string
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, createAgent,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Email,
		arg.Password,
		arg.Photo,
		arg.Description,
	)
	var i Agent
	err := row.Scan(
		&i.AgentId,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.Photo,
		&i.Description,
	)
	return i, err
}

const deleteAgent = `-- name: DeleteAgent :one
DELETE FROM Agent
WHERE agent_id = $1
RETURNING agent_id, first_name, last_name, phone, email, password, photo, description
`

func (q *Queries) DeleteAgent(ctx context.Context, agentId int32) (Agent, error) {
	row := q.db.QueryRowContext(ctx, deleteAgent, agentId)
	var i Agent
	err := row.Scan(
		&i.AgentId,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.Photo,
		&i.Description,
	)
	return i, err
}

const getAgentById = `-- name: GetAgentById :one
SELECT agent_id, first_name, last_name, phone, email, password, photo, description FROM agent
WHERE agent_id = $1
`

func (q *Queries) GetAgentById(ctx context.Context, agentId int32) (Agent, error) {
	row := q.db.QueryRowContext(ctx, getAgentById, agentId)
	var i Agent
	err := row.Scan(
		&i.AgentId,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.Photo,
		&i.Description,
	)
	return i, err
}

const listAgents = `-- name: ListAgents :many
SELECT agent_id, first_name, last_name, phone, email, password, photo, description FROM agent
ORDER BY agent_id
`

func (q *Queries) ListAgents(ctx context.Context) ([]Agent, error) {
	rows, err := q.db.QueryContext(ctx, listAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.AgentId,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
			&i.Email,
			&i.Password,
			&i.Photo,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgent = `-- name: UpdateAgent :one
UPDATE agent 
SET first_name = $2, last_name = $3, phone = $4, email = $5, password = $6, photo = $7, description = $8
WHERE Agent_id = $1
RETURNING agent_id, first_name, last_name, phone, email, password, photo, description
`

type UpdateAgentParams struct {
	AgentId     int32
	FirstName   string
	LastName    string
	Phone       int16
	Email       string
	Password    string
	Photo       string
	Description string
}

func (q *Queries) UpdateAgent(ctx context.Context, arg UpdateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, updateAgent,
		arg.AgentId,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Email,
		arg.Password,
		arg.Photo,
		arg.Description,
	)
	var i Agent
	err := row.Scan(
		&i.AgentId,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.Photo,
		&i.Description,
	)
	return i, err
}
