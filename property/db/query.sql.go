// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
)

const createProperty = `-- name: CreateProperty :one
INSERT INTO property (address, status, rooms, toilets, park, size, description, features, agent_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING property_id, address, status, rooms, toilets, park, size, description, features, agent_id
`

type CreatePropertyParams struct {
	Address     string
	Status      string
	Rooms       int16
	Toilets     int16
	Park        int16
	Size        int32
	Description string
	Features    string
	AgentId     int32
}

func (q *Queries) CreateProperty(ctx context.Context, arg CreatePropertyParams) (Property, error) {
	row := q.db.QueryRowContext(ctx, createProperty,
		arg.Address,
		arg.Status,
		arg.Rooms,
		arg.Toilets,
		arg.Park,
		arg.Size,
		arg.Description,
		arg.Features,
		arg.AgentId,
	)
	var i Property
	err := row.Scan(
		&i.PropertyId,
		&i.Address,
		&i.Status,
		&i.Rooms,
		&i.Toilets,
		&i.Park,
		&i.Size,
		&i.Description,
		&i.Features,
		&i.AgentId,
	)
	return i, err
}

const deleteProperty = `-- name: DeleteProperty :one
DELETE FROM Property
WHERE property_id = $1
RETURNING property_id, address, status, rooms, toilets, park, size, description, features, agent_id
`

func (q *Queries) DeleteProperty(ctx context.Context, propertyId int32) (Property, error) {
	row := q.db.QueryRowContext(ctx, deleteProperty, propertyId)
	var i Property
	err := row.Scan(
		&i.PropertyId,
		&i.Address,
		&i.Status,
		&i.Rooms,
		&i.Toilets,
		&i.Park,
		&i.Size,
		&i.Description,
		&i.Features,
		&i.AgentId,
	)
	return i, err
}

const getPropertyById = `-- name: GetPropertyById :one
SELECT property_id, address, status, rooms, toilets, park, size, description, features, agent_id FROM property
WHERE property_id = $1
`

func (q *Queries) GetPropertyById(ctx context.Context, propertyId int32) (Property, error) {
	row := q.db.QueryRowContext(ctx, getPropertyById, propertyId)
	var i Property
	err := row.Scan(
		&i.PropertyId,
		&i.Address,
		&i.Status,
		&i.Rooms,
		&i.Toilets,
		&i.Park,
		&i.Size,
		&i.Description,
		&i.Features,
		&i.AgentId,
	)
	return i, err
}

const listPropertyByAgentId = `-- name: ListPropertyByAgentId :many
SELECT property_id, address, status, rooms, toilets, park, size, description, features, agent_id FROM property
WHERE agent_id = $1
`

func (q *Queries) ListPropertyByAgentId(ctx context.Context, agentId int32) ([]Property, error) {
	rows, err := q.db.QueryContext(ctx, listPropertyByAgentId, agentId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Property
	for rows.Next() {
		var i Property
		if err := rows.Scan(
			&i.PropertyId,
			&i.Address,
			&i.Status,
			&i.Rooms,
			&i.Toilets,
			&i.Park,
			&i.Size,
			&i.Description,
			&i.Features,
			&i.AgentId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPropertys = `-- name: ListPropertys :many
SELECT property_id, address, status, rooms, toilets, park, size, description, features, agent_id FROM property
ORDER BY property_id
`

func (q *Queries) ListPropertys(ctx context.Context) ([]Property, error) {
	rows, err := q.db.QueryContext(ctx, listPropertys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Property
	for rows.Next() {
		var i Property
		if err := rows.Scan(
			&i.PropertyId,
			&i.Address,
			&i.Status,
			&i.Rooms,
			&i.Toilets,
			&i.Park,
			&i.Size,
			&i.Description,
			&i.Features,
			&i.AgentId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProperty = `-- name: UpdateProperty :one
UPDATE Property 
SET address = $2, status = $3, rooms = $4, toilets = $5, park = $6, size = $7, description = $8, features = $9
WHERE Property_id = $1
RETURNING property_id, address, status, rooms, toilets, park, size, description, features, agent_id
`

type UpdatePropertyParams struct {
	PropertyId  int32
	Address     string
	Status      string
	Rooms       int16
	Toilets     int16
	Park        int16
	Size        int32
	Description string
	Features    string
}

func (q *Queries) UpdateProperty(ctx context.Context, arg UpdatePropertyParams) (Property, error) {
	row := q.db.QueryRowContext(ctx, updateProperty,
		arg.PropertyId,
		arg.Address,
		arg.Status,
		arg.Rooms,
		arg.Toilets,
		arg.Park,
		arg.Size,
		arg.Description,
		arg.Features,
	)
	var i Property
	err := row.Scan(
		&i.PropertyId,
		&i.Address,
		&i.Status,
		&i.Rooms,
		&i.Toilets,
		&i.Park,
		&i.Size,
		&i.Description,
		&i.Features,
		&i.AgentId,
	)
	return i, err
}
